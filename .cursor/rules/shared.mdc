---
description: 
globs: 
alwaysApply: false
---
# Shared Packages Architecture

## Package Dependencies
- `packages/core` is the foundation and should have minimal dependencies
- Other packages can depend on `packages/core` and `packages/shared`
- Avoid circular dependencies between packages
- Use workspace references for internal dependencies

## Package Structure
Each package should follow this structure:
```
packages/[package-name]/
├── src/           # Source code
├── tests/         # Test files
├── package.json   # Package configuration
└── README.md      # Package documentation
```

## Package Guidelines
- Keep packages focused and single-purpose
- Document public APIs
- Include TypeScript types
- Write tests for all packages
- Maintain backward compatibility

## Key Packages

### Core Package
- Contains fundamental utilities and types
- Minimal external dependencies
- Used by all other packages

### Shared Package
- Common utilities and types
- Shared between applications
- No business logic

### UI Package
- Reusable UI components
- Design system implementation
- Styling utilities

### Database Package
- Database models and schemas
- Query builders
- Migration utilities

### Auth Package
- Authentication logic
- Authorization rules
- User management

### AI Package
- AI model integrations
- AI-related utilities
- Model management

### Cache Package
- Caching strategies
- Cache invalidation
- Storage adapters

### Email Package
- Email templates
- Email sending logic
- Email queue management

### i18n Package
- Translation management
- Locale handling
- Formatting utilities

### Env Package
- Environment configuration
- Configuration validation
- Environment-specific settings
